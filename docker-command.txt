-----------------------Install Docker--------------------
   18  sudo apt-get update
   19  sudo apt-get remove docker docker-engine docker.io
   20  sudo apt install docker.io
   21  sudo systemctl start docker
   22  sudo systemctl enable docker
   23  docker --version
---------------------------------------------------------
---------------------- Getting started ------------------

sudo docker run hello-world         -> Installs and runs hello-world
sudo docker run busybox:1.24        -> Installs and runs busybox
sudo docker run -i -t busybox:1.24  -> Go inside busybox 
    ( -i starts interactive container; -t creates a pseudo-TTY tahat atachers stdin
     and stdout (linux terminal))
     If we exist this session all files will be deleted (try login again)
     i.e everytime docker run starts new container.


sudo docker run -d busybox:1.24 sleep 2000 ( Run container in detached mode)
sudo docker ps (list all running containers)
sudo docker ps -a(list all containers)
sudo docker run --rm busybox:1.24 sleep 1 (automatically  removes container)
sudo docker run --name bawa busybox:1.24 (gives name to container)
sudo docker inspect {container_id} (shows low level info of container)
sudo docker stop {container_ids} (stops a running container/containers)
sudo docker rm {container_ids} (removes a stopped container/containers)
sudo docker run -it -d -p 8888:8080 tomcat:8.0 (changed port to 8888 from 8080)
sudo docker logs {container_id} (shows logs for that container)

------------------------- BUILDING IMAGES -----------------------------
Way 1: (commiting chnages as new image)
    1. Run  sudo docker run -it debian:jessie (to install debian in interactive mode)
    2. in that container install git.
    3. exit container
    4. sudo docker commit 54e743366fe6 akshaygautam/debian:1.0.0
       sudo docker commit {container_id} new_repo_name:tag (commits the new container image)
    5. run sudo docker ps -a (to verify new image)
    6. run new image with  sudo docker run -it new_repo_name:tag
    7. verify git installation.

Way 2: (using docker file: funfact at every command in docker file docker commits
an intermediate container and runs next command on this new container and then removes
old container.)
    1. Create a Dockerfile  Like following 
        (
            FROM debian:jessie
            RUN apt-get update  
            RUN apt-get install -y git
            RUN apt-get install -y vim
            RUN apt-get install -y default-jdk
        )
    2. Run sudo docker build {your_image_name} {.{path_to_Dockerfile}}
    3. run sudo docker images (to verify new image)
    4. run new image with  sudo docker run -it new_repo_name:tag

sudo docker history ak/debian:latest (list out history of image layers)
 --------------------------------------------------------------------
 -------------- Dockerfile in depth -------------
1. chain RUN 
    (
        FROM debian:jessie
        RUN apt-get update
        RUN apt-get install -y git  \
        vim \
        default-jdk
    )
    OR
    (
        FROM debian:jessie
        RUN apt-get update
        RUN apt-get install -y default-jdk  git  python vim 
    )
2. Arrange multiline alphanumerically
    (
        FROM debian:jessie
        RUN apt-get update
        RUN apt-get install -y default-jdk \
        git  \
        python \
        vim 
    )
3. using CMD in Dockerfile (It will work when you actuallu run the container)
    (
        FROM debian:jessie
        RUN apt-get update
        RUN apt-get install -y default-jdk \
        git  \
        python \
        vim 
        CMD [ "echo", "bawa its working !!! HAHAHA" ]
    )
4. Avoid docker cache (use: --no-cache=true)
    sudo docker build -t ak/dockerfile:2.1 ./Documents/ --no-cache=true

5. COPY instruction: used to copy file to container
    (
        FROM debian:jessie
        RUN apt-get update && apt-get install -y git vim 
        COPY copyThis.txt /src/copyThis.txt
    
    )

6. ADD instruction: used to copy file to containers however can download file from net
7. Pushing image to docker hub
    1: sudo docker images.
    2: sudo docker tag 50855108fc13 akshaygautam/demodocker:0.1
    3: check new image sudo docker images
    4: login to docker hub=> sudo docker login --username=akshaygautam
        issue in login? try
        sudo apt install gnupg2 pass
    5: sudo docker push akshaygautam/demodocker:0.1
    6: verify on docker hub

------------------ Dockerizing App ----------------------------
-------------------- basic -----------------------------
    1. sudo docker build -t pydockerapp:v0.1 ./{path to}/dockerapp/py1/
        this will read dockerfile in py1 package and build the image
    2. verify new image by using sudo docker images
    3.  sudo docker run -d -p 5000:5000 pydockerapp:v0.1
        Run the container.
        Go to localhost:5000 on browser to verify.
    4. sudo docker exec -it {container_id} bash
        You will go inside container
    5. run ls to list the files.
        you'll find the py source code there.

    ------ Inspect docker file ------
    FROM python:3.5                 => use py 3.5
    RUN pip install Flask==0.11.1   => install Flask
    RUN useradd -ms /bin/bash admin => create new user admin
    USER admin                      => using user admin
    WORKDIR /app                    => select the working directory of container
    COPY app /app                   => Run copy in working directory
    CMD ["python", "app.py"]        => Run CMD in working directory
    ----------------------------------
    6. inside container run pwd ( verify the dockerfile now )
    7. run ps axu ( verify the user running pyapp )

-------------- key/value app -----------------------
    1. sudo docker build -t pydockerapp:v0.1 ./{path to}/dockerapp/py2/
        -- follow all above steps --
    
------------------- Docker-compose ---------------------
Automated tool to maintain config for multi-container systems.
    1. create a docker-compose.yml(yaml) file.
    2. run sudo docker-compose -f ./Documents/docker-compose.yml up -d
        => -f specifies path to file, else you can run, docker-compose up in the file directory.
        => -d is detached mode, remove -d and you'll see logs printing.
    3. check running containers using docker ps command.
    4. check app running on localhost:5000.
        ------------- Inspect docker-compose.yml -----------
        ( version: '3'                              => use docker version 3
            services:                               => create specified services
                dockerapp:                          => create dockerapp service
                    build: ./dockerapp/composepy3/  => from this path to dockerfile
                    ports:                          => on port 
                        - "5000:5000"               => 5000 external to 5000 container port
                    depends_on:                     => dockerapp depends_on redis service 
                        - redis                     => create redis service before dockerapp
                redis:                              => create redis service
                    image: redis                    => from image redis
        )
---------------------------------------------------------




